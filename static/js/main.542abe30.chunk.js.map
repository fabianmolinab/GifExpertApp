{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGidItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGidItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","catch","error","console","log","useFetchGifs","GifExpertApp","defaulCategories","categorias","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAoBhD,OACE,uBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAGEJ,EAAWK,OAAOC,QAAU,IAE9BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAIhB,UACE,kCAAKD,EAAL,OACA,uBACEQ,KAAK,OACLC,MAAOT,EACPU,SArBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,c,+BCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEiCC,UAAWH,GAF5C,+DAGFI,MAAMF,GAHJ,cAGfG,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAcdM,GAdc,4CAAH,sDCCPO,EAAa,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAChC,OACE,qBAAKc,UAAU,yCAAf,SAEE,qBACEC,IAAKf,EACLgB,IAAKN,OCFAO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECJb,SAACA,GAAc,IAAD,EAEdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAkBxC,OAXAC,qBAAW,WACTxB,EAAQC,GACLwB,MAAM,SAAAC,GACLH,EAAS,CACPf,KAAMkB,EACNL,SAAS,OAGZM,OAAO,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAC9B,CAAE3B,IAEEqB,EDX0BS,CAAa9B,GAAjCa,EAH0B,EAG/BN,KAAaa,EAHkB,EAGlBA,QAErB,OACE,qCACE,mCAAMpB,EAAN,OAEEoB,GAAW,yCAEb,qBAAKJ,UAAU,YAAf,SAEIH,EAAOJ,KAAI,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEMA,GADCA,YElBNqB,EAAe,SAAC,GAA+B,IAAD,IAA5BC,wBAA4B,MAAT,GAAS,IAErB9C,mBAAS8C,GAFY,mBAElDC,EAFkD,KAEtChD,EAFsC,KAIzD,OACE,qCACE,kEACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEIgD,EAAWxB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CACEA,SAAUA,GACLA,Y,MCZnBkC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.542abe30.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  // Cada vez que escriba\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value)\n  }\n\n  // Cuando haces ENTER\n  const handleSubmit = (e) => {\n    e.preventDefault(); // Previene el refrescar de la pagina\n\n    // Validación del campo de busqueda\n    if (inputValue.trim().length >= 2) {\n\n      setCategories(cats => [inputValue, ...cats]);\n      setInputValue('');\n    }\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <p> {inputValue} </p>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n      />\n    </form>\n  )\n};\nAddCategory.propTypes = {\n\n  setCategories: PropTypes.func.isRequired\n\n};","\n\nexport const getGifs = async (category) => {\n\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=50&api_key=mRT7lkeqFhhlrf6GTm6lBi2yLCmn8o66`\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n\n  return gifs;\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const GifGidItem = ({title,url}) => {\n  return (\n    <div className=\"card animate__animated animate__wobble\">\n      \n      <img \n        src={url} \n        alt={title}\n      />\n    </div>\n  )\n};\n\nGifGidItem.propTypes = {\n\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired\n\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGidItem } from './GifGidItem';\n\n\nexport const GifGrid = ({ category }) => {\n\n\n  const { data:images, loading } = useFetchGifs(category); // Llamado a la API  \n\n  return (\n    <>\n      <h3> {category} </h3>\n\n      { loading && <p>Cargando</p>}\n\n      <div className=\"card-grid\">\n        {\n          images.map(img => (\n            <GifGidItem\n              key={img}\n              {...img}\n            />\n          ))\n        }\n      </div>\n    </>\n  )\n}\n\nGifGrid.propTypes = {\n\n  category: PropTypes.string.isRequired\n\n}\n","import { useState, useEffect } from 'react'; \nimport {getGifs} from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\n  const [state, setState] = useState({  \n    data: [],\n    loading: true\n  });\n\n  useEffect( () => {\n    getGifs(category) //Peticion a la API\n      .then( imgs =>{\n        setState({ \n          data: imgs,\n          loading: false\n        });          \n      }) \n      .catch( error => console.log(error))\n  }, [ category ]);\n  \n  return state; //{data: [], loading: true};\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = ({ defaulCategories = [] }) => {\n\n  const [categorias, setCategories] = useState(defaulCategories);\n\n  return (\n    <>\n      <h2>¡Puedes buscar cualquier Gif!</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {\n          categorias.map(category =>\n            <GifGrid\n              category={category}\n              key={category}\n            />\n          )\n        }\n      </ol>\n    </>\n  )\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}